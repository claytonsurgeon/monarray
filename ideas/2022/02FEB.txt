





10 + 20


		0x8 <shape> rank 0, base vali32
		0x9 <shape> rank 0, base vali32
	0xA <array> 0x8 data: 10
	0xB <array> 0x9 data: 20
		0xC <shape> rank 0, base vali32
	0xD <array> 0xC data: XX
0xE addi32 <op2>   0xA 0xB 0xD



10 + ![2 i32]


		0x8 <shape> rank 0, base vali32
		0x9 <shape> rank 1, base vali32
	0xA <array> 0x8 data: 10
	0xB <array> 0x9 data: 0 0
		0xC <shape> rank 1, base vali32
	0xD <array> 0xC data: XX XX
0xE mapi32 <HOF> addi32 0xA 0xB 0xD

select
iterate
add


Map()

sum: !10 /+

!9 + 1 /*

ID3x3: 3 3 i32 ~ 0


10 20 30 $ 3 3 !i32


10 20 30 /+



[10 20 u32]! {1, 2, 3}



pre-mondadic and post-mondadic forms



operations no longer contain the result data, instead they contain idxs just like their operands.

this allows for more flexibility and potentially optimizations allow a result register to be reused.



dependent execution chains should be able to share result data store, 
what about pipeline parallelism?


operations do not return their own index, but the index of their data. we already saw an example  of this with 'cast'

as such there is probably not a need to segregate ops and k


if a op recieves a return value as an operand, then it can reuse that space if possible

these return data points should have a flag that marks them as an intermediary value
these should be safe for optimization because they are inaccessible outside their expression

operations should still return their index to maintain program structure. As well, this would negate the need for a special intermediary value flag.






Error handling

the array compiler generates a bytecode array
the array executor executes a bytecode array (continuously)

each function is an executable AST node that pushes a respective value onto the stack, each function will perform all possible reductions

variables cascade through the tree structure

each function performs type checking that allows the definitions of strongly typed graphs with type inference

generic numbers Integer and Decimal are coerced into concrete ints like i32, i64, u8, f64, etc

generic integer can be coerced into a float point value, but a generic decimal cannot be coerced into a machine integer value

iz, uz, and fz are register sized numbers\




ref and key


push allows for multi-push

key creates a label for a point
ref looks up the label in the label table

keys 



idx add = Graph(
	key("a", i32(0)),
	key("b", i32(0)),
	key("->", addi32(
		ref("a"),
		ref("b"),
	))
)

idx add = Graph(
	key("->", addi32(
		ref("a"),
		ref("b"),
	))
	key("a", i32(0)),
	key("b", i32(0)),
)

// add: { a + b <- a: b: ![i32] }

contrary to my current design, it might be better for consumers to be specified *before* the value they reference is declared
this allows the push array to be pre-calculated, of course that mean that the operators would have to be typed

push(someIdx, 
	consumer
	consumer
	consumer
)


when a node is updated it display some kind of signal that activates the dependant nodes without have to have a dep list

    


references could be collected then the ref array could be added at the end of the memory space once their dimensions are known
this is ideal, because even though this ruins the locality, it doesn't matter because keys are base expressions anyway



references are resolved by using shells.
you can access a reference at the same shell level as you or higher
the AST resolves to a flat array and operands are pushed before operators
a graph is an operator whose operands are indexes



for example

a: 10

g: {
	a: 10
	b: a
}
c: a


0	a'0 : 10
1	-- a'1 : 10
2	-- b'1 : @a		=> a'1
3	g'0 : { @1, @2 }
4	c'0 : @a	=> a'0



so a reference like   a.b.c
means find a reference at my shell or higher, then find a b with a shell level 1 less than a and a c with a shell level 1 less than b, where a and b are graphs

this requires that graphs update the shell level of their children
this must be done recursively 
each time the incrementing function accesses a node, it should update the shell level